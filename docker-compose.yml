version: '3.8'

services:
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: colosseum-mongodb
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    ports:
      - "27017:27017"
    networks:
      - colosseum-network
    restart: unless-stopped

  # Redis service
  redis:
    image: redis:alpine
    container_name: colosseum-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - colosseum-network
    restart: unless-stopped
    command: redis-server --requirepass redispassword

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: colosseum-backend
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/tournamentDB?authSource=admin
      - JWT_SECRET_KEY=your_secure_jwt_secret_key
      - PORT=5000
      - REDIS_URL=redis://:redispassword@redis:6379
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    ports:
      - "5000:5000"
    networks:
      - colosseum-network
    restart: unless-stopped

  # Frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: colosseum-frontend
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000
    ports:
      - "3000:3000"
    networks:
      - colosseum-network
    restart: unless-stopped

  # Landing page application
  landingpage:
    build:
      context: ./LandingPage
      dockerfile: Dockerfile
    container_name: colosseum-landingpage
    ports:
      - "4000:4000"
    networks:
      - colosseum-network
    restart: unless-stopped

# Define networks
networks:
  colosseum-network:
    driver: bridge

# Define volumes
volumes:
  mongodb_data:
  redis_data:
